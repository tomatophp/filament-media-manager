<?php

namespace TomatoPHP\FilamentMediaManager\Resources;

use BackedEnum;
use Filament\Actions;
use Filament\Forms;
use Filament\Resources\Resource;
use Filament\Schemas\Schema;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use TomatoPHP\FilamentMediaManager\Models\Folder;
use TomatoPHP\FilamentMediaManager\Models\Media;
use TomatoPHP\FilamentMediaManager\Resources\MediaResource\Pages;

class MediaResource extends Resource
{
    protected static bool $isScopedToTenant = false;

    protected static BackedEnum | string | null $navigationIcon = 'heroicon-o-rectangle-stack';

    protected static bool $shouldRegisterNavigation = false;

    public static function getModel(): string
    {
        return config('filament-media-manager.model.media'); // TODO: Change the autogenerated stub
    }

    public static function getPluralLabel(): ?string
    {
        return trans('filament-media-manager::messages.media.title');
    }

    public static function getLabel(): ?string
    {
        return trans('filament-media-manager::messages.media.single'); // TODO: Change the autogenerated stub
    }

    public static function setBreadcrumb(?string $breadcrumb): void
    {
        self::$breadcrumb = $breadcrumb;
    }

    public static function form(Schema $form): Schema
    {
        return $form;
    }

    public static function table(Table $table): Table
    {
        return $table
            ->modifyQueryUsing(function (Builder $query) {
                if (request()->has('folder_id') && ! empty('folder_id')) {
                    $folder = Folder::find(request()->get('folder_id'));
                    if ($folder) {
                        $query->where('collection_name', $folder->collection);
                    }
                }
            })
            ->emptyState(fn () => view('filament-media-manager::pages.media'))
            ->content(function () {
                return view('filament-media-manager::pages.media');
            })
            ->columns([
                Tables\Columns\Layout\Stack::make([
                    Tables\Columns\ViewColumn::make('preview')
                        ->label(trans('filament-media-manager::messages.media.columns.image'))
                        ->view('filament-media-manager::columns.media-preview'),
                ]),
                Tables\Columns\Layout\Stack::make([
                    Tables\Columns\TextColumn::make('model.name')
                        ->label(trans('filament-media-manager::messages.media.columns.model'))
                        ->searchable(),
                    Tables\Columns\TextColumn::make('collection_name')
                        ->label(trans('filament-media-manager::messages.media.columns.collection_name'))
                        ->badge()
                        ->icon('heroicon-o-folder')
                        ->searchable(),
                ]),
                Tables\Columns\Layout\Stack::make([
                    Tables\Columns\TextColumn::make('name')
                        ->label(trans('filament-media-manager::messages.media.columns.name'))
                        ->searchable(),
                    Tables\Columns\TextColumn::make('file_name')
                        ->label(trans('filament-media-manager::messages.media.columns.file_name'))
                        ->searchable(),
                    Tables\Columns\TextColumn::make('mime_type')
                        ->label(trans('filament-media-manager::messages.media.columns.mime_type'))
                        ->searchable(),
                    Tables\Columns\TextColumn::make('disk')
                        ->label(trans('filament-media-manager::messages.media.columns.disk'))
                        ->searchable(),
                    Tables\Columns\TextColumn::make('conversions_disk')
                        ->label(trans('filament-media-manager::messages.media.columns.conversions_disk'))
                        ->searchable(),
                    Tables\Columns\TextColumn::make('size')
                        ->label(trans('filament-media-manager::messages.media.columns.size'))
                        ->numeric()
                        ->sortable(),
                    Tables\Columns\TextColumn::make('order_column')
                        ->label(trans('filament-media-manager::messages.media.columns.order_column'))
                        ->numeric()
                        ->sortable(),
                    Tables\Columns\TextColumn::make('created_at')
                        ->dateTime()
                        ->sortable(),
                    Tables\Columns\TextColumn::make('updated_at')
                        ->dateTime()
                        ->sortable(),
                ]),
            ])
            ->contentGrid([
                'md' => 2,
                'xl' => 3,
            ])
            ->defaultSort('order_column', 'asc')
            ->recordActions([
                Actions\EditAction::make(),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('mime_type')
                    ->label(trans('filament-media-manager::messages.media.columns.mime_type'))
                    ->options([
                        'image' => 'Images',
                        'video' => 'Videos',
                        'audio' => 'Audio',
                        'application/pdf' => 'PDF',
                        'application/zip' => 'Archives',
                        'text' => 'Text Files',
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        if (! empty($data['value'])) {
                            return $query->where('mime_type', 'like', '%' . $data['value'] . '%');
                        }

                        return $query;
                    }),
                Tables\Filters\SelectFilter::make('collection_name')
                    ->label(trans('filament-media-manager::messages.media.columns.collection_name'))
                    ->options(function () {
                        return Media::query()
                            ->whereNotNull('collection_name')
                            ->distinct()
                            ->pluck('collection_name', 'collection_name')
                            ->toArray();
                    })
                    ->searchable()
                    ->preload(),
                Tables\Filters\SelectFilter::make('disk')
                    ->label(trans('filament-media-manager::messages.media.columns.disk'))
                    ->options(function () {
                        return Media::query()
                            ->whereNotNull('disk')
                            ->distinct()
                            ->pluck('disk', 'disk')
                            ->toArray();
                    }),
                Tables\Filters\Filter::make('size')
                    ->form([
                        Forms\Components\TextInput::make('size_from')
                            ->label(trans('filament-media-manager::messages.media.filters.size_from'))
                            ->numeric(),
                        Forms\Components\TextInput::make('size_to')
                            ->label(trans('filament-media-manager::messages.media.filters.size_to'))
                            ->numeric(),
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        return $query
                            ->when(
                                $data['size_from'],
                                fn (Builder $query, $size): Builder => $query->where('size', '>=', $size * 1024),
                            )
                            ->when(
                                $data['size_to'],
                                fn (Builder $query, $size): Builder => $query->where('size', '<=', $size * 1024),
                            );
                    }),
                Tables\Filters\Filter::make('created_at')
                    ->form([
                        Forms\Components\DatePicker::make('created_from')
                            ->label(trans('filament-media-manager::messages.media.filters.created_from')),
                        Forms\Components\DatePicker::make('created_until')
                            ->label(trans('filament-media-manager::messages.media.filters.created_until')),
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        return $query
                            ->when(
                                $data['created_from'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '>=', $date),
                            )
                            ->when(
                                $data['created_until'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '<=', $date),
                            );
                    }),
            ])
            ->defaultPaginationPageOption(12)
            ->paginationPageOptions([
                '12',
                '24',
                '48',
                '96',
            ])
            ->toolbarActions([
                Actions\BulkActionGroup::make([
                    Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListMedia::route('/'),
        ];
    }
}
