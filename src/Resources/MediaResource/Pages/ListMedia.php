<?php

namespace TomatoPHP\FilamentMediaManager\Resources\MediaResource\Pages;

use Filament\Actions;
use Filament\Forms\Components\TextInput;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\ManageRecords;
use Illuminate\Contracts\Support\Htmlable;
use TomatoPHP\FilamentMediaManager\Models\Folder;
use TomatoPHP\FilamentMediaManager\Models\Media;
use TomatoPHP\FilamentMediaManager\Resources\Actions\CreateMediaAction;
use TomatoPHP\FilamentMediaManager\Resources\Actions\CreateSubFolderAction;
use TomatoPHP\FilamentMediaManager\Resources\Actions\DeleteFolderAction;
use TomatoPHP\FilamentMediaManager\Resources\Actions\EditCurrentFolderAction;
use TomatoPHP\FilamentMediaManager\Resources\MediaResource;

class ListMedia extends ManageRecords
{
    protected static string $resource = MediaResource::class;

    public ?int $folder_id = null;

    public ?Folder $folder = null;

    public function getTitle(): string | Htmlable
    {
        return $this->folder->name;
    }

    public function getSubheading(): string | Htmlable
    {
        return $this->folder->description ?? '';
    }

    public function mount(): void
    {
        parent::mount(); // TODO: Change the autogenerated stub

        if (! request()->has('folder_id')) {
            abort(404, 'Folder ID is required');
        }

        $folder = Folder::find(request()->get('folder_id'));
        if (! $folder) {
            abort(404, 'Folder ID is required');
        } else {
            if ($folder->is_protected && ! session()->has('folder_password')) {
                abort(403, 'You Cannot Access This Folder');
            }
        }

        $this->folder = $folder;
        $this->folder_id = request()->get('folder_id');
        session()->put('folder_id', $this->folder_id);
    }

    protected function getHeaderActions(): array
    {
        $folder_id = $this->folder_id;

        $folder = config('filament-media-manager.model.folder')::find($folder_id);

        if (filament('filament-media-manager')->allowUserAccess && (! empty($folder->user_id))) {
            if ($folder->user_id === auth()->user()->id && $folder->user_type === get_class(auth()->user())) {
                return [
                    CreateMediaAction::make($folder_id),
                    CreateSubFolderAction::make($folder_id),
                    DeleteFolderAction::make($folder_id),
                    EditCurrentFolderAction::make($folder_id),
                ];
            } else {
                return [];
            }
        } else {
            return [
                CreateMediaAction::make($folder_id),
                CreateSubFolderAction::make($folder_id),
                DeleteFolderAction::make($folder_id),
                EditCurrentFolderAction::make($folder_id),
            ];
        }
    }

    public function folderAction(?Folder $item = null)
    {
        return Actions\Action::make('folderAction')
            ->requiresConfirmation(function (array $arguments) {
                if ($arguments['record']['is_protected']) {
                    return true;
                } else {
                    return false;
                }
            })
            ->schema(function (array $arguments) {
                if ($arguments['record']['is_protected']) {
                    return [
                        TextInput::make('password')
                            ->password()
                            ->revealable()
                            ->required()
                            ->maxLength(255),
                    ];
                } else {
                    return null;
                }
            })
            ->action(function (array $arguments, array $data) {
                if ($arguments['record']['is_protected']) {
                    if ($arguments['record']['password'] != $data['password']) {
                        Notification::make()
                            ->title('Password is incorrect')
                            ->danger()
                            ->send();

                        return;
                    } else {
                        session()->put('folder_password', $data['password']);
                    }
                }
                if (! $arguments['record']['model_type']) {
                    if (filament()->getTenant()) {
                        return redirect()->to(url(filament()->getCurrentPanel()->getId() . '/' . filament()->getTenant()->id . '/media?folder_id=' . $arguments['record']['id']));
                    } else {
                        return redirect()->route('filament.' . filament()->getCurrentPanel()->getId() . '.resources.media.index', ['folder_id' => $arguments['record']['id']]);
                    }
                }
                if (! $arguments['record']['model_id'] && ! $arguments['record']['collection']) {
                    if (filament()->getTenant()) {
                        return redirect()->to(url(filament()->getCurrentPanel()->getId() . '/' . filament()->getTenant()->id . '/folders?model_type=' . $arguments['record']['model_type']));
                    } else {
                        return redirect()->route('filament.' . filament()->getCurrentPanel()->getId() . '.resources.folders.index', ['model_type' => $arguments['record']['model_type']]);
                    }
                } elseif (! $arguments['record']['model_id']) {
                    if (filament()->getTenant()) {
                        return redirect()->to(url(filament()->getCurrentPanel()->getId() . '/' . filament()->getTenant()->id . '/folders?model_type=' . $arguments['record']['model_type'] . '&collection=' . $arguments['record']['collection']));
                    } else {
                        return redirect()->route('filament.' . filament()->getCurrentPanel()->getId() . '.resources.folders.index', ['model_type' => $arguments['record']['model_type'], 'collection' => $arguments['record']['collection']]);
                    }
                } else {
                    if (filament()->getTenant()) {
                        return redirect()->to(url(filament()->getCurrentPanel()->getId() . '/' . filament()->getTenant()->id . '/media?folder_id=' . $arguments['record']['id']));
                    } else {
                        return redirect()->route('filament.' . filament()->getCurrentPanel()->getId() . '.resources.media.index', ['folder_id' => $arguments['record']['id']]);
                    }
                }
            })
            ->view('filament-media-manager::pages.folder-action', ['item' => $item]);
    }

    public function editMedia(): Actions\Action
    {
        return Actions\Action::make('editMedia')
            ->label(trans('filament-media-manager::messages.media.meta.edit-media'))
            ->icon('heroicon-s-pencil')
            ->color('primary')
            ->fillForm(function (array $arguments): array {
                $media = Media::find($arguments['record']['id']);

                return [
                    'title' => $media->getCustomProperty('title'),
                    'description' => $media->getCustomProperty('description'),
                    'alt' => $media->getCustomProperty('alt'),
                ];
            })
            ->schema([
                \Filament\Forms\Components\TextInput::make('title')
                    ->label('Title')
                    ->maxLength(255),
                \Filament\Forms\Components\Textarea::make('description')
                    ->label('Description')
                    ->rows(3)
                    ->maxLength(500),
                \Filament\Forms\Components\TextInput::make('alt')
                    ->label('Alt Text')
                    ->maxLength(255),
            ])
            ->action(function (array $arguments, array $data) {
                $media = Media::find($arguments['record']['id']);

                $media->setCustomProperty('title', $data['title']);
                $media->setCustomProperty('description', $data['description']);
                $media->setCustomProperty('alt', $data['alt']);
                $media->save();
            })
            ->successNotificationTitle('Media updated successfully');
    }

    public function deleteMedia(): Actions\Action
    {
        return Actions\Action::make('deleteMedia')
            ->label(trans('filament-media-manager::messages.media.meta.delete-media'))
            ->icon('heroicon-s-trash')
            ->color('danger')
            ->requiresConfirmation()
            ->action(function (array $arguments) {
                $media = Media::find($arguments['record']['id']);
                $media->delete();
            })
            ->successNotificationTitle(trans('filament-media-manager::messages.media.notifications.delete-folder'));

    }
}
